package com.example.librarymanagementapi.service;

import com.example.librarymanagementapi.dto.ReservationDTO;
import com.example.librarymanagementapi.exception.CustomBadRequestException;
import com.example.librarymanagementapi.model.Book;
import com.example.librarymanagementapi.model.Borrower;
import com.example.librarymanagementapi.model.Reservation;
import com.example.librarymanagementapi.respository.BookRepository;
import com.example.librarymanagementapi.respository.BorrowerRepository;
import com.example.librarymanagementapi.respository.ReservationRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Date;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Fail.fail;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.argThat;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * @author lakithaprabudh
 */
@ExtendWith(MockitoExtension.class)
public class ReservationServiceTest {
    @Mock
    private ReservationRepository reservationRepository;
    @Mock
    private BorrowerRepository borrowerRepository;
    @Mock
    private BookRepository bookRepository;

    @InjectMocks
    private ReservationService reservationService;

    @Test
    public void testReserveBook_Successful() {
        // Mock repositories
        Borrower borrower = new Borrower(1L, "John Doe", "john@test.com");
        Book book = new Book(1L, "Test Title", "Test Author", "1234567890", 1);
        when(borrowerRepository.findById(1L)).thenReturn(Optional.of(borrower));
        when(bookRepository.findById(1L)).thenReturn(Optional.of(book));

        // Create reservation DTO
        ReservationDTO reservationDTO = new ReservationDTO(null, 1L, 1L, null, null, false);
        Reservation expectedReservation = new Reservation(11L, borrower, book, null, null, false);
        when(reservationRepository.save(argThat(reservation -> reservation.getBook().getISBN().equals("1234567890")))).thenReturn(expectedReservation);

        // Call the method
        Long reservationId = reservationService.reserveBook(reservationDTO);

        // Assertions
        verify(reservationRepository).save(any(Reservation.class));
        assertEquals(reservationId, Long.valueOf(11L)); // Assuming reservation ID is generated by DB
    }

    @Test
    public void testReturnBook_SuccessfulReturn() throws Exception {
        // Mock data
        Long reservationId = 1L;
        Reservation expectedReservation = new Reservation(reservationId,
                new Borrower(1L, "John Doe", "joe@test.com"),
                new Book(2L, "Test Title", "Test Author", "1234567890", 1),
                new Date(2024, 05, 10), new Date(), false);  // Set returned fields

        // Mock repositories (return existing reservation and mock save behavior)
        when(reservationRepository.findById(reservationId)).thenReturn(Optional.of(expectedReservation));
        when(reservationRepository.save(expectedReservation)).thenReturn(expectedReservation); // Return the same reservation

        // Call the method
        Long returnedReservationId = reservationService.returnBook(reservationId);

        // Assertions
        assertThat(returnedReservationId).isEqualTo(reservationId);
        assertThat(expectedReservation.isReturned()).isTrue();  // Verify on expected object
        assertThat(expectedReservation.getReturnedDate()).isNotNull();
    }

    @Test
    public void testReturnBook_InvalidReservationId() {
        // Mock data with invalid reservation ID
        Long reservationId = 10L; // Non-existent reservation

        // Mock repository (reservation not found)
        when(reservationRepository.findById(reservationId)).thenReturn(Optional.empty());

        // Call the method and verify exception
        try {
            reservationService.returnBook(reservationId);
            fail("Expected CustomBadRequestException"); // If execution reaches here, the test fails
        } catch (CustomBadRequestException e) {
            // Expected exception thrown
        }
    }
}
